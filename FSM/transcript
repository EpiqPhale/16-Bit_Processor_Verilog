# Reading pref.tcl
do runlab.do
# ** Warning: (vlib-34) Library already exists at "work".
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 14:21:48 on Jun 04,2021
# vlog -reportprogress 300 -work work "+acc" "+cover" ./FSM.sv 
# -- Compiling module FSM
# ** Error (suppressible): ./FSM.sv(51): (vlog-12003) Variable 'PC_clr' written by continuous and procedural assignments. See ./FSM.sv(42). 
# ** Error (suppressible): ./FSM.sv(56): (vlog-12003) Variable 'PC_clr' written by continuous and procedural assignments. See ./FSM.sv(42). 
# ** Error (suppressible): ./FSM.sv(35): (vlog-12003) Variable 'PC_clr' written by continuous and procedural assignments. See ./FSM.sv(42). 
# -- Compiling module FSM_tb
# End time: 14:21:48 on Jun 04,2021, Elapsed time: 0:00:00
# Errors: 3, Warnings: 0
# ** Error: C:/intelFPGA_lite/20.1/modelsim_ase/win32aloem/vlog failed.
# Error in macro ./runlab.do line 7
# C:/intelFPGA_lite/20.1/modelsim_ase/win32aloem/vlog failed.
#     while executing
# "vlog -work work +acc +cover "./FSM.sv""
do runlab.do
# ** Warning: (vlib-34) Library already exists at "work".
# Model Technology ModelSim - Intel FPGA Edition vlog 2020.1 Compiler 2020.02 Feb 28 2020
# Start time: 14:22:45 on Jun 04,2021
# vlog -reportprogress 300 -work work "+acc" "+cover" ./FSM.sv 
# -- Compiling module FSM
# ** Note: (vlog-143) Recognized 1 FSM in module "FSM(verilog)".
# -- Compiling module FSM_tb
# 
# Top level modules:
# 	FSM_tb
# End time: 14:22:45 on Jun 04,2021, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -voptargs=""+acc"" -fsmdebug FSM_tb 
# Start time: 14:22:45 on Jun 04,2021
# Loading sv_std.std
# Loading work.FSM_tb
# Loading work.FSM
# .main_pane.wave.interior.cs.body.pw.wf
# .main_pane.structure.interior.cs.body.struct
# .main_pane.objects.interior.cs.body.tree
#                    0 Test 1: Init. Set IR to zeros.  This should Init then cycle Fetch -> Decode -> Noop.
#                   75 If no errors, Test 1 successful.
#                   75 Test 2: Load. Set IR to 0010 0000 0000 1010.  This should cycle Fetch -> Decode -> Ld_A -> Ld_B.  RF_s active in Ld_A and RF_W_en in Ld_B.
#                  155 If no errors, Test 2 successful.
#                  155 Test 3: Store. Set IR to 0001 1001 0000 0000.  This should cycle Fetch -> Decode -> Store.  Should activate D_wr and RF_Ra_addr.
#                  215 If no errors, Test 3 successful.
#                  215 Test 4: Add. Set IR to 0011 0011 0100 1101. This should cycle Fetch -> Decode -> Add. Values can be extrapolated from IR.
#                  275 If no errors, Test 4 successful.
#                  275 Test 5: Sub. Set IR to 0100 0100 0011 0001. This should cycle Fetch -> Decode -> Sub. Values can be extrapolated from IR.
#                  335 If no errors, Test 5 successful.
#                  335 Test 6: Halt. Set IR to 0101 0000 0000 0000.  Should drop into halt after decode and stay there.
#                  498 If no errors, Test 6 successful.
#                  498 If no errors, all test successful.
# ** Note: $stop    : ./FSM.sv(239)
#    Time: 498 ps  Iteration: 0  Instance: /FSM_tb
# Break in Module FSM_tb at ./FSM.sv line 239
# End time: 14:53:28 on Jun 04,2021, Elapsed time: 0:30:43
# Errors: 0, Warnings: 0
