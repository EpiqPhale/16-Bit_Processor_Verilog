// James Wedum
// TCES 330, Spring 2021
// 5/27/2021
// Project 1

/*
 * This module describes the Controller for the processor for the TCES 330 class project such that:
 *
 *	--Inputs--
 *	Clock = The 50 MHz system clock(?)
 *	Reset = Syncronous high-active reset.
 
 *	--Outputs--
 *	PC_Out = Current value of Program Counter.
 *	IR_Out = Current value of the Instruction Register.
 *	OutState = Current State of State Machine.
 *	NextState = Next State of State Machine.
 *	D_Addr = The 8-bit data memory address
 *	D_Wr = Data write enable bit.
 *	RF_s = 1-bit selector for 16-bit 2-to-1 multiplexer that chooses between the data memory and the ALU output
 *	RF_W_en = Register write enable bit.
 *	RF_Ra_Addr = 4-bit address for A-side register file.
 *	RF_Rb_Addr = 4-bit address for B-side register file.
 *	RF_W_Addr = 4-bit Register file write address.
 *	ALU_s0 = 3-bit ALU function select.  See ALU for opcodes.
 */
 
 module Control_Unit(Clock, Reset, PC_Out, IR_Out, OutState, NextState, 
		D_Addr, D_Wr,RF_s, RF_W_en, RF_Ra_Addr, RF_Rb_Addr, RF_W_Addr, ALU_s0);
	input Clock, Reset;
	
	output D_Wr, RF_s, RF_W_en;
	output [2:0] ALU_s0;
	output [3:0] OutState, NextState, RF_Ra_Addr, RF_Rb_Addr, RF_W_Addr;
	output [6:0] PC_Out;
	output [7:0] D_Addr;
	output [15:0] IR_Out;
	wire PC_up, FSM_to_PC_Reset, IR_ld;
	
	//instruction memory
	InstructionMemory IR(Clock, Reset, PC_Out, data);
	
	//Program Counter
	PC pc(Clock, FSM_to_PC_Reset, PC_up, PC_Out);
	
	//Instruction Register
	IR Instruction_Reg(Clock, ld, data, IR_Out);
	
	//Controller/State Machine
	FSM controller(Clock, Reset, IR_Out, FSM_to_PC_Reset, IR_ld, PC_up, D_addr, D_wr, RF_s, 
					RF_Ra_addr, RF_Rb_addr, RF_W_en, RF_W_Addr, ALU_s0, OutState, NextState);
 endmodule
 